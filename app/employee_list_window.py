import tkinter as tk
from tkinter import ttk, messagebox
from app.excel_io import load_employees, save_employees
from app.utils import is_valid_citizen_id, is_valid_name

# üîí ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
employee_list_window = None

def show_employee_list(root):
    global employee_list_window

    # ‚úã ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≥
    if employee_list_window is not None and employee_list_window.winfo_exists():
        employee_list_window.lift()  # ‡∏î‡∏∂‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        return
    # ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    x = root.winfo_x()
    y = root.winfo_y()
    w = root.winfo_width()

    employee_list_window = tk.Toplevel()
    employee_list_window.title("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô")
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
    width, height = 700, 450
    # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    new_x = x + w + 10  # +10 ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
    new_y = y
    employee_list_window.geometry(f"{width}x{height}+{new_x}+{new_y}")

    def on_close():
        global employee_list_window
        employee_list_window.destroy()
        employee_list_window = None  # üí° ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á

    employee_list_window.protocol("WM_DELETE_WINDOW", on_close)

    employee_data = load_employees()  # üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå

    def add_or_edit():
        cid = entry_id.get().strip()
        name = entry_name.get().strip()
        dept = entry_dept.get().strip()

        # ‚ùó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
        if not cid or not name or not dept:
            messagebox.showwarning("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            return
        if not is_valid_citizen_id(cid):
            messagebox.showerror("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 13 ‡∏´‡∏•‡∏±‡∏Å")
            return
        if not is_valid_name(name):
            messagebox.showerror("‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            return

        # ‚ùå ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á)
        for row in employee_data:
            existing_cid, existing_name, _ = row
            if existing_cid != cid and existing_name == name:
                messagebox.showerror("‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥", f"‡∏ä‡∏∑‡πà‡∏≠ '{name}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                return

        # üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ã‡πâ‡∏≥
        for i, row in enumerate(employee_data):
            if row[0] == cid:
                confirm = messagebox.askyesno(
                    "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
                    f"‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô '{cid}' ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
                )
                if confirm:
                    employee_data[i] = (cid, name, dept)
                    update_table()
                    save_employees(employee_data)
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                clear_inputs()
                return

        # ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        employee_data.append((cid, name, dept))
        update_table()
        save_employees(employee_data)
        messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    def delete_selected():
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö")
            return
        cid = str(tree.item(selected)["values"][0])
        nonlocal employee_data
        employee_data = [row for row in employee_data if str(row[0]) != cid]
        update_table()
        save_employees(employee_data)
        messagebox.showinfo("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß", "‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    def update_table():
        tree.delete(*tree.get_children())
        for index, row in enumerate(employee_data):
            tag = "evenrow" if index % 2 == 0 else "oddrow"
            tree.insert("", "end", values=row, tags=(tag,))
        clear_inputs()

    def clear_inputs():
        entry_id.delete(0, tk.END)
        entry_name.delete(0, tk.END)
        entry_dept.delete(0, tk.END)

    def on_row_select(event):
        selected = tree.selection()
        if selected:
            values = tree.item(selected)["values"]
            entry_id.delete(0, tk.END)
            entry_id.insert(0, values[0])
            entry_name.delete(0, tk.END)
            entry_name.insert(0, values[1])
            entry_dept.delete(0, tk.END)
            entry_dept.insert(0, values[2])

    # üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á frame ‡∏´‡∏•‡∏±‡∏Å
    frame = tk.Frame(employee_list_window, padx=10, pady=10, relief="solid", borderwidth=1)
    frame.pack(fill=tk.BOTH, expand=True)

    # üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    tree = ttk.Treeview(
        frame,
        columns=("cid", "name", "dept"),
        show="headings",
        height=12
    )
    tree.heading("cid", text="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    tree.heading("name", text="‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    tree.heading("dept", text="‡πÅ‡∏ú‡∏ô‡∏Å")
    tree.column("cid", anchor="center", width=200)
    tree.column("name", anchor="center", width=250)
    tree.column("dept", anchor="center", width=100)

    tree.tag_configure("oddrow", background="#f2f2f2")
    tree.tag_configure("evenrow", background="#ffffff")

    tree.grid(row=0, column=0, columnspan=5, sticky="nsew")
    frame.grid_rowconfigure(0, weight=1)
    frame.grid_columnconfigure(0, weight=1)

    tree.bind("<<TreeviewSelect>>", on_row_select)

    # üìú ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    scrollbar = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
    tree.configure(yscrollcommand=scrollbar.set)
    scrollbar.grid(row=0, column=5, sticky='ns')

    # üßæ ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    entry_id = ttk.Entry(frame, width=20)
    entry_id.grid(row=1, column=0, padx=5, pady=10)

    entry_name = ttk.Entry(frame, width=25)
    entry_name.grid(row=1, column=1, padx=5, pady=10)

    entry_dept = ttk.Entry(frame, width=15)
    entry_dept.grid(row=1, column=2, padx=5, pady=10)

    # üîò ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    btn_add = ttk.Button(frame, text="Add/Edit", command=add_or_edit)
    btn_add.grid(row=1, column=3, padx=5, pady=10)

    # ‚ùå ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
    btn_del = ttk.Button(frame, text="Del", command=delete_selected)
    btn_del.grid(row=1, column=4, padx=5, pady=10)

    update_table()
