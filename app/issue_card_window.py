import tkinter as tk
from tkinter import messagebox
from datetime import datetime, date
import locale
from app.excel_io import load_employees, save_employees, save_daily_log_row


# üîí ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
issue_card_window = None

try:
    locale.setlocale(locale.LC_TIME, "th_TH.UTF-8")
except:
    locale.setlocale(locale.LC_TIME, "Thai_Thailand")

# ‚è±Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏£‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô)
daily_time_log = {}

def open_issue_card_window(root):
    global issue_card_window
    # ‚úã ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≥
    if issue_card_window is not None and issue_card_window.winfo_exists():
        issue_card_window.lift()  # ‡∏î‡∏∂‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        return
    # ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    x = root.winfo_x()
    y = root.winfo_y()
    w = root.winfo_width()

    issue_card_window = tk.Toplevel()
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
    width, height = 550, 350
    issue_card_window.title("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô")
    # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    new_x = x + w + 10  # +10 ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
    new_y = y
    issue_card_window.geometry(f"{width}x{height}+{new_x}+{new_y}")

    def on_close():
        global issue_card_window
        issue_card_window.destroy()
        issue_card_window = None  # üí° ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á

    issue_card_window.protocol("WM_DELETE_WINDOW", on_close)


    time_label = tk.Label(issue_card_window, text="", font=("Arial", 48))
    time_label.grid(row=0, column=0, columnspan=2, pady=(10, 5))

    def update_time():
        now = datetime.now().strftime("%H:%M:%S")
        time_label.config(text=now)
        issue_card_window.after(1000, update_time)

    update_time()

    date_str = datetime.now().strftime("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà %d/%m/%Y")
    date_label = tk.Label(issue_card_window, text=date_str, font=("TH Sarabun New", 14))
    date_label.grid(row=1, column=1, sticky="e", padx=20, pady=(0, 10))

    fields = {
        "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•": tk.StringVar(),
        "‡πÅ‡∏ú‡∏ô‡∏Å": tk.StringVar(),
        "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": tk.StringVar(),
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å": tk.StringVar(),
    }

    row_index = 2
    for label, var in fields.items():
        tk.Label(issue_card_window, text=label, font=("TH Sarabun New", 14)).grid(row=row_index, column=0, sticky="e", padx=10, pady=3)
        entry = tk.Entry(issue_card_window, textvariable=var, font=("TH Sarabun New", 14), state="readonly", width=25)
        entry.grid(row=row_index, column=1, sticky="w", padx=10)
        row_index += 1

    # üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Excel
    employee_data = load_employees()
    # üí° ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô dict ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô key
    employee_dict = {row[0]: {"fullname": row[1], "dept": row[2]} for row in employee_data}

    # üïí ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô
    last_checked_date = [date.today()]

    def reset_daily_log_if_new_day():
        today = date.today()
        if today != last_checked_date[0]:
            daily_time_log.clear()
            last_checked_date[0] = today

    def handle_code_enter(event=None):
        reset_daily_log_if_new_day()

        code = entry_code.get().strip()
        if code in employee_dict: # ‚úÖ ‡πÄ‡∏à‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            now = datetime.now()
            now_str = now.strftime("%H:%M:%S")
            today_str = now.strftime("%d/%m/%Y") # üëâ ‡πÑ‡∏î‡πâ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            info = employee_dict[code]
            # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ---
            fields["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•"].set(info["fullname"])
            fields["‡πÅ‡∏ú‡∏ô‡∏Å"].set(info["dept"])

            # --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ dict ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ --
            if code not in daily_time_log:
                daily_time_log[code] = {"in": now_str, "out": ""}
                fields["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"].set(now_str)
                fields["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"].set("")
            elif daily_time_log[code]["out"] == "":
                daily_time_log[code]["out"] = now_str
                fields["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"].set(daily_time_log[code]["in"])
                fields["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"].set(now_str)
            else:
                fields["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"].set(daily_time_log[code]["in"])
                fields["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"].set(daily_time_log[code]["out"])

             # --- üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Excel ---
            save_daily_log_row({
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": today_str,
                "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": fields["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"].get(),
                "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å": fields["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"].get(),
                "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•": fields["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•"].get(),
                "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô": code,
                "‡πÅ‡∏ú‡∏ô‡∏Å": fields["‡πÅ‡∏ú‡∏ô‡∏Å"].get(),
            })

        else:  # ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            for var in fields.values():
                var.set("")
            if len(code) != 13:
                messagebox.showerror("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 13 ‡∏´‡∏•‡∏±‡∏Å")
                entry_code.delete(0, tk.END)
                entry_code.focus_set()   # ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£
            else:
                messagebox.showerror("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                entry_code.delete(0, tk.END)
                entry_code.focus_set()   # ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£


    tk.Label(issue_card_window, text="‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô", font=("TH Sarabun New", 14)).grid(row=row_index, column=0, sticky="e", padx=10, pady=(10, 5))
    entry_code = tk.Entry(issue_card_window, font=("TH Sarabun New", 14), width=25)
    entry_code.grid(row=row_index, column=1, sticky="w", padx=10, pady=(10, 5))

    def validate_code_length(new_value):
        return len(new_value) <= 13 and (new_value.isdigit() or new_value == "")

    vcmd = (issue_card_window.register(validate_code_length), "%P")
    entry_code.config(validate="key", validatecommand=vcmd)

    entry_code.bind("<Return>", handle_code_enter)
    entry_code.focus_set()