import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime
from tkcalendar import DateEntry
import openpyxl
import os
from app.excel_io import logs_between  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á

report_window = None

def show_daily_report(root):
    global report_window
    if report_window is not None and report_window.winfo_exists():
        report_window.lift()
        return

    x = root.winfo_x()
    y = root.winfo_y()
    w = root.winfo_width()

    report_window = tk.Toplevel()
    width, height = 950, 500
    report_window.title("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô")

    new_x = x + w + 10
    new_y = y
    report_window.geometry(f"{width}x{height}+{new_x}+{new_y}")

    def on_close():
        global report_window
        report_window.destroy()
        report_window = None

    report_window.protocol("WM_DELETE_WINDOW", on_close)

    tk.Label(report_window, text="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô",
             font=("TH Sarabun New", 16, "bold")).pack(pady=(10, 0))

    frm = tk.Frame(report_window); frm.pack(pady=(5, 10))

    tk.Label(frm, text="‡∏à‡∏≤‡∏Å", font=("TH Sarabun New", 14)).pack(side="left")
    date_from = DateEntry(frm, locale="th", date_pattern="dd/MM/yyyy", width=12)
    date_from.pack(side="left", padx=4)

    tk.Label(frm, text="‡∏ñ‡∏∂‡∏á", font=("TH Sarabun New", 14)).pack(side="left", padx=(10,0))
    date_to = DateEntry(frm, locale="th", date_pattern="dd/MM/yyyy", width=12)
    date_to.pack(side="left", padx=4)

    cols = ("date","in_time","out_time","fullname","id","dept")
    heads = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà","‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤","‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•","‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô","‡πÅ‡∏ú‡∏ô‡∏Å"]

    tree = ttk.Treeview(report_window, columns=cols, show="headings")
    tree.pack(fill="both", expand=True, padx=10, pady=10)

    for c,h in zip(cols,heads):
        tree.heading(c, text=h)
        tree.column(c, anchor="center", width=130)
    tree.column("fullname", anchor="w", width=200)

    ysb = ttk.Scrollbar(report_window, orient="vertical", command=tree.yview)
    tree.configure(yscrollcommand=ysb.set)
    ysb.pack(side="right", fill="y")

    # ===== üîÅ Export Excel Function =====
    def export_to_excel():
        rows = [tree.item(child)['values'] for child in tree.get_children()]
        if not rows:
            messagebox.showinfo("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")
            return

        file_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô Excel",
            initialfile="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô"  # üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        )
        if not file_path:
            return

        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(heads)  # ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        for row in rows:
            new_row = list(row)
            if len(new_row) >= 5:
                new_row[4] = str(new_row[4]).zfill(13)  # ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ!
            ws.append(new_row)
        try:
            wb.save(file_path)
            messagebox.showinfo("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ:\n{e}")

    # ===== üìã Right-click Menu =====
    context_menu = tk.Menu(report_window, tearoff=0)
    context_menu.add_command(label="‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel", command=export_to_excel)

    def show_context_menu(event):
        context_menu.post(event.x_root, event.y_root)

    tree.bind("<Button-3>", show_context_menu)

    def clear_tree():
        for i in tree.get_children():
            tree.delete(i)

    def search():
        try:
            d1 = datetime.strptime(date_from.get(), "%d/%m/%Y")
            d2 = datetime.strptime(date_to.get(), "%d/%m/%Y")
        except ValueError:
            messagebox.showerror("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return
        if d1 > d2:
            messagebox.showwarning("‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
            return
        clear_tree()
        for rec in logs_between(d1, d2):
            tree.insert("", "end", values=[
                rec["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], rec["‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"], rec["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"],
                rec["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏∏‡∏•"], rec["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"], rec["‡πÅ‡∏ú‡∏ô‡∏Å"]
            ])

    tk.Button(frm, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", command=search,
              font=("TH Sarabun New", 12), width=8).pack(side="left", padx=10)

    search()

if __name__ == "__main__":
    root = tk.Tk()
    tk.Button(root, text="‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", command=lambda: show_daily_report(root)).pack(padx=20, pady=20)
    root.mainloop()
